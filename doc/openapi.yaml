openapi: 3.0.0
info:
  title: Sample API
  description: Optional multiline or single-line description in [CommonMark](http://commonmark.org/help/) or HTML.
  version: 0.1.9

servers:
  - url: http://api.example.com/v1
    description: Optional server description, e.g. Main (production) server
  - url: http://staging-api.example.com
    description: Optional server description, e.g. Internal staging server for testing
tags:
  - name: users
    description: Operations about user
  - name: authentication
    description: Operations about authentication
paths:
  /users:
    get:
      security:
        - bearerAuth: []
      tags:
        - users
      summary: Returns a list of users.
      responses:
        401:
          $ref: "#/components/responses/401"
        402:
          $ref: "#/components/responses/402"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        405:
          $ref: "#/components/responses/405"
        5XX:
          $ref: "#/components/responses/5XX"
        "200": # status code
          description: A JSON array of user names
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users"
  /users/{id}:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - users
      summary: Returns a user by ID.
      parameters:
        - name: id
          in: path
          description: ID of user to return
          required: true
          schema:
            type: string
          style: simple
      responses:
        401:
          $ref: "#/components/responses/401"
        402:
          $ref: "#/components/responses/402"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        405:
          $ref: "#/components/responses/405"
        5XX:
          $ref: "#/components/responses/5XX"
        "200":
          description: A user object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    put:
      security:
        - bearerAuth: [ ]
      tags:
        - users
      summary: Updates a user by ID.
      parameters:
        - name: id
          in: path
          description: ID of user to update
          required: true
          schema:
            type: string
          style: simple
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        401:
          $ref: "#/components/responses/401"
        402:
          $ref: "#/components/responses/402"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        405:
          $ref: "#/components/responses/405"
        5XX:
          $ref: "#/components/responses/5XX"
        "200":
          description: A user object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /auth:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - authentication
      summary: Return current user and refreshed token if needed
      responses:
        401:
          $ref: "#/components/responses/401"
        402:
          $ref: "#/components/responses/402"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        405:
          $ref: "#/components/responses/405"
        5XX:
          $ref: "#/components/responses/5XX"
        "200": # status code
          description: A JSON array of user names
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: object
                    properties:
                      value:
                        type: string
                        nullable: true
                        example: ""
                      type:
                        type: string
                        example: "Bearer"
                  permissions:
                    $ref: "#/components/schemas/Permissions"
                  user:
                    $ref: "#/components/schemas/User"
  /auth/steam:
    get:
      tags:
        - authentication
      summary: Redirect to steam authentication ( send client on them )
      description: |
        You need to send the client on this route to authenticate with steam
        And then the client will be redirected to /auth/steam/authenticate
        After that, the client will be redirected to the frontend with the token in the query
      responses:
        5XX:
          $ref: "#/components/responses/5XX"
        301:
          description: Redirect to steam authentication
          headers:
            Location:
              schema:
                type: string
                example: "https://steamcommunity.com/openid/login?openid.claimed_id=http://specs.openid.net/auth/2.0/identifier_select&openid.identity=http://specs.openid.net/auth/2.0/identifier_select&openid.mode=checkid_setup&openid.ns=http://specs.openid.net/auth/2.0&openid.realm=http://localhost:3333&openid.return_to=http://localhost:3333/auth/steam/callback"
  /auth/steam/authenticate:
    get:
      tags:
        - authentication
      summary: Callback steam authentication ( only to catch steam response )
      description: |
        This route is only to catch the steam response
        And then the client will be redirected to the frontend with the token in the query
      responses:
        5XX:
          $ref: "#/components/responses/5XX"
        301:
          description: Url to frontend with token in query
          headers:
            Location:
              schema:
                type: string
                example: "http://localhost:3000/?token=oat_Mg.MlhIcENSYWhhVVgyckJpS056cGw3VDdNdDVURUhJSzl2MWVTRC1ZeTMxMTY1ODMyMTM"

components:
  responses:
    "401":
      description: "Unauthorized"
    "402":
      description: "Payment required"
    "403":
      description: "Forbidden"
    "404":
      description: "Resource not found"
    "405":
      description: "Invalid input (e.g. invalid fields, invalid format)"
    "5XX":
      description: "Server error"
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  schemas:
    User:
      properties:
        id:
          type: string
          example: "bcaa40fa-32fd-447b-9f6f-0eac1786e239"
        pseudo:
          type: string
          example: "JohnDoe"
        steamId:
          type: number
          example: 76561198000000000
        userImage:
          type: string
          example: "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/00/"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Users:
      type: array
      items:
        $ref: "#/components/schemas/User"
    Permission:
      properties:
        name:
          type: string
          example: "ticket:create"
    Permissions:
      type: array
      items:
        $ref: "#/components/schemas/Permission"
